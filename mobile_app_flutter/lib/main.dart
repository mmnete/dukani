// lib/main.dart

import 'package:flutter/material.dart';
import 'screens/onboarding/shop_onboarding_screen.dart';
import 'screens/invite_workers_screen.dart';
import 'screens/worker/worker_home_screen.dart';
import 'screens/worker/stock_entry_screen.dart';
import 'screens/worker/sale_entry_screen.dart';
import 'screens/worker/missed_sale_entry_screen.dart';
import 'screens/manager/manager_dashboard_screen.dart';

import 'package:flutter_localizations/flutter_localizations.dart'; // Import for localization
import './l10n/app_localizations.dart'; // Generated by Flutter
// lib/main.dart
import 'package:flutter/material.dart';
import 'package:flutter_localizations/flutter_localizations.dart';
import 'l10n/app_localizations.dart';
import 'package:provider/provider.dart'; // State management

// Import your new session provider
import '/services/user_session_provider.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized(); // Required for shared_preferences

  runApp(
    ChangeNotifierProvider(
      create: (context) =>
          UserSessionProvider(), // Initialize UserSessionProvider
      child: const DukaniApp(),
    ),
  );
}

class DukaniApp extends StatelessWidget {
  const DukaniApp({super.key}); // Added const constructor

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Dukani',
      localizationsDelegates: const [
        AppLocalizations.delegate,
        GlobalMaterialLocalizations.delegate,
        GlobalWidgetsLocalizations.delegate,
        GlobalCupertinoLocalizations.delegate,
      ],
      supportedLocales: const [
        Locale('sw', ''), // Swahili
        Locale('en', ''), // English
      ],
      locale: const Locale('sw', ''), // Default to Swahili
      theme: ThemeData(
        primarySwatch: Colors.green, // Keeping your existing primary color
        visualDensity: VisualDensity.adaptivePlatformDensity,
        inputDecorationTheme: InputDecorationTheme(
          border: OutlineInputBorder(borderRadius: BorderRadius.circular(8.0)),
        ),
        // Adding theme for cards and elevated buttons from previous manager_dashboard_screen context
        cardTheme: CardThemeData(
          elevation: 4,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
          margin: const EdgeInsets.symmetric(vertical: 8, horizontal: 0),
        ),
        elevatedButtonTheme: ElevatedButtonThemeData(
          style: ElevatedButton.styleFrom(
            foregroundColor: Colors.white,
            backgroundColor: Colors
                .blueAccent, // Using blueAccent for consistency with manager dashboard buttons
            padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(10),
            ),
            textStyle: const TextStyle(
              fontSize: 16,
              fontWeight: FontWeight.w600,
            ),
            elevation: 3,
          ),
        ),
        // Adding text themes for consistency
        textTheme: const TextTheme(
          titleLarge: TextStyle(
            fontSize: 24.0,
            fontWeight: FontWeight.bold,
            color: Colors.blueGrey,
          ),
          titleMedium: TextStyle(
            fontSize: 20.0,
            fontWeight: FontWeight.w600,
            color: Colors.blueGrey,
          ),
          bodyLarge: TextStyle(fontSize: 16.0, color: Colors.black87),
          bodyMedium: TextStyle(fontSize: 14.0, color: Colors.black54),
          bodySmall: TextStyle(fontSize: 12.0, color: Colors.black45),
        ),
      ),
      // Home logic to redirect based on userId session
      home: Consumer<UserSessionProvider>(
        builder: (context, sessionProvider, child) {
          if (sessionProvider.isLoading) {
            // Show a loading indicator while session data is being loaded
            return const Scaffold(
              body: Center(child: CircularProgressIndicator()),
            );
          } else if (sessionProvider.userId == null) {
            // If no userId, proceed with onboarding flow
            // In a real app, your ShopOnboardingScreen would handle setting userId and shopId
            return ShopOnboardingScreen();
          } else {
            // If userId exists, redirect to Manager Dashboard
            // Assuming 'Mohamed Mnete' is the default manager name for now.
            // In a real app, this name would also come from user data.
            return const ManagerDashboardScreen(managerName: 'Mohamed Mnete');
          }
        },
      ),
      routes: {
        '/worker-home': (context) => WorkerHomeScreen(),
        '/stock-entry': (context) => StockEntryScreen(),
        '/sale-entry': (context) => SaleEntryScreen(),
        '/missed-sale': (context) => MissedSaleEntryScreen(),
        '/invite-workers': (context) {
          return WorkerInvitationScreen(); // Changed type to String?
        },
        // You might want to add a route for the manager dashboard if you navigate to it from other places
        '/manager-dashboard': (context) =>
            const ManagerDashboardScreen(managerName: 'Mohamed Mnete'),
      },
    );
  }
}
